import React, { useState } from 'react';

const getIcon = (type, isBlack) => {
    switch (type) {
        case "rook":
            return (
                <svg width="75%" height="75%" viewBox="0 0 239 262" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M3 232.053H29.9474V196.531L47.0957 174.483V69.1435L23.823 47.0957V3H56.8947V18.9234H98.5407V3H142.636V18.9234H183.057V3H217.354V47.0957L195.306 69.1435V174.483L208.78 196.531V232.053H235.727V259H3V232.053Z" fill={isBlack ? "black" : "#fff"} />
                    <path d="M29.9474 232.053H3V259H235.727V232.053H208.78M29.9474 232.053V196.531L47.0957 174.483M29.9474 232.053H208.78M47.0957 174.483V69.1435M47.0957 174.483H195.306M47.0957 69.1435L23.823 47.0957M47.0957 69.1435H195.306M23.823 47.0957V3H56.8947V18.9234H98.5407V3H142.636V18.9234H183.057V3H217.354V47.0957M23.823 47.0957H217.354M217.354 47.0957L195.306 69.1435M195.306 69.1435V174.483M195.306 174.483L208.78 196.531V232.053" stroke="#AAA" strokeWidth="6" />
                </svg>
            )

        case "pawn":
            return (
                <svg width="75%" height="75%" viewBox="0 0 200 263" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M196.208 260H3C3 184.649 44.0566 154.541 64.5849 148.906C23.0453 108.332 52.1069 71.6226 71.8302 58.3396C50.5774 16.8 80.6855 4.80503 98.3962 4C138.97 4.96604 134.623 40.6289 127.377 58.3396C176.645 96.0151 151.931 134.415 133.415 148.906C188.479 173.057 198.22 233.031 196.208 260Z" fill={isBlack ? "black" : "white"} stroke="#AAAAAA" strokeWidth="5" />
                </svg>
            )

        case "king":
            return (
                <svg width="85%" height="85%" viewBox="0 0 261 275" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M203.124 250.124C138.452 289.645 72.8812 266.591 48.18 250.124V222.054V193.984C-30.8639 149.073 11.5024 102.665 42.566 85.0745C53.5 77 89.1544 94.4772 108.81 113.789C102.821 95.2656 98.7548 59.5038 126.775 56.1248C125.877 56.249 126.4 40.2959 126.775 32.3038H111.056C108.436 29.3097 104.768 22.6478 111.056 19.9532C117.343 17.2585 124.155 18.8304 126.775 19.9532V6.47978C127.898 4.60848 131.49 1.98866 136.88 6.47978V19.9532H152.599C154.096 21.8245 156.192 26.9144 152.599 32.3038H136.88V57.0011C146.981 60.8292 160.883 74.6073 159.335 109.117C183.843 86.3506 203.124 79.8832 214.352 85.0745C297.887 123.698 241.673 173.774 203.124 193.984V215.317V250.124Z" fill={isBlack ? "black" : "white"} />
                    <path d="M48.18 250.124C72.8812 266.591 138.452 289.645 203.124 250.124M48.18 250.124C121.834 221.38 182.165 238.147 203.124 250.124M48.18 250.124C48.18 242.886 48.18 232.208 48.18 222.054M203.124 250.124V215.317M203.124 193.984V215.317M203.124 193.984C241.673 173.774 297.887 123.698 214.352 85.0745C203.124 79.8832 183.843 86.3506 159.335 109.117M203.124 193.984C190.261 188.291 164.66 181.314 132.389 180.646M48.18 193.984C48.18 197.005 48.18 209.103 48.18 222.054M48.18 193.984C78.374 183.397 107.384 180.128 132.389 180.646M48.18 193.984C-30.8639 149.073 11.5024 102.665 42.566 85.0745C53.5 77 89.1544 94.4772 108.81 113.789M48.18 222.054C68.39 208.206 127.673 187.472 203.124 215.317M132.389 141.214V180.646M132.389 141.214C126.814 133.41 118.534 123.343 108.81 113.789M132.389 141.214C141.55 127.673 150.656 117.18 159.335 109.117M108.81 113.789C102.821 95.2656 98.7548 59.5038 126.775 56.1248M159.335 109.117C160.883 74.6073 146.981 60.8292 136.88 57.0011M126.775 56.1248C128.519 55.9144 130.388 55.8296 132.389 55.8822C133.735 56.0285 135.258 56.3866 136.88 57.0011M126.775 56.1248C125.877 56.249 126.4 40.2959 126.775 32.3038H111.056C108.436 29.3097 104.768 22.6478 111.056 19.9532C117.343 17.2585 124.155 18.8304 126.775 19.9532V6.47978C127.898 4.60848 131.49 1.98866 136.88 6.47978V19.9532H152.599C154.096 21.8245 156.192 26.9144 152.599 32.3038H136.88V57.0011" stroke="#AAAAAA" strokeWidth="6" />
                </svg>
            )

        case "queen":
            return (
                <svg width="75%" height="75%" viewBox="0 0 257 238" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M41.9756 214.398C45.3057 196.915 52.3821 193.932 55.5041 194.626C56.8916 190.81 58.2098 180.889 52.3821 171.732L32.6098 150.919L28.4472 141.553L17 56.2195L66.9512 137.757V30.2033L106.39 127.524L128.35 25L149.163 135.54L190.789 35.4065L187.667 136.321L240.74 56.2195L226.171 141.553V150.919L202.236 173.813V181.098C200.501 183.179 198.073 188.798 202.236 194.626C212.226 199.621 212.642 209.889 211.602 214.398L216.805 223.764C140.837 245.618 37.813 226.886 36.7724 223.764C35.9399 221.267 39.8943 216.48 41.9756 214.398Z" fill={isBlack ? "black" : "white"} />
                    <path d="M55.5041 194.626C52.3821 193.932 45.3057 196.915 41.9756 214.398C39.8943 216.48 35.9399 221.267 36.7724 223.764C37.813 226.886 140.837 245.618 216.805 223.764L211.602 214.398C212.642 209.889 212.226 199.621 202.236 194.626M55.5041 194.626C97.1301 187.966 170.669 191.851 202.236 194.626M55.5041 194.626C56.8916 190.81 58.2098 180.889 52.3821 171.732M202.236 194.626C198.073 188.798 200.501 183.179 202.236 181.098V173.813M52.3821 171.732C78.0515 166.875 143.959 160.493 202.236 173.813M52.3821 171.732L32.6098 150.919L28.4472 141.553M202.236 173.813L226.171 150.919V141.553M226.171 141.553L240.74 56.2195L187.667 136.321M226.171 141.553C218.094 139.783 204.965 137.787 187.667 136.321M28.4472 141.553C40.6329 139.886 53.7144 138.656 66.9512 137.757M28.4472 141.553L17 56.2195L66.9512 137.757M187.667 136.321L190.789 35.4065L149.163 135.54M187.667 136.321C187.667 136.321 172.101 135.678 149.163 135.54M149.163 135.54L128.35 25L106.39 127.524L66.9512 30.2033V137.757M149.163 135.54C126.361 135.403 96.2748 135.765 66.9512 137.757" stroke="#aaa" strokeWidth="5" />
                    <circle cx="12.5" cy="49.5" r="9.5" fill={isBlack ? "black" : "white"} stroke="#aaa" strokeWidth="6" />
                    <circle cx="63.5" cy="20.5" r="9.5" fill={isBlack ? "black" : "white"} stroke="#aaa" strokeWidth="6" />
                    <circle cx="128.5" cy="12.5" r="9.5" fill={isBlack ? "black" : "white"} stroke="#aaa" strokeWidth="6" />
                    <circle cx="193.5" cy="24.5" r="9.5" fill={isBlack ? "black" : "white"} stroke="#aaa" strokeWidth="6" />
                    <circle cx="244.5" cy="45.5" r="9.5" fill={isBlack ? "black" : "white"} stroke="#aaa" strokeWidth="6" />
                </svg>
            )

        case "bishop":
            return (
                <svg width="85%" height="85%" viewBox="0 0 254 262" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M127.337 225.229C104.374 224.859 64.0482 217.674 72.0485 191.895C74.2708 183.747 80.7154 166.339 88.7157 161.894C61.703 141.542 31.6589 89.1008 127.337 42.0221C127.248 41.9781 127.158 41.9341 127.069 41.8901C127.157 41.8705 127.247 41.8499 127.337 41.8285C120.605 40.2342 108.307 33.7011 110.939 19.6672C110.571 14.8827 113.348 4.90507 127.337 3.03473C141.327 4.90507 144.104 14.8827 143.736 19.6672C146.367 33.7011 134.069 40.2342 127.337 41.8285C127.428 41.8499 127.517 41.8705 127.606 41.8901C127.516 41.9341 127.427 41.9781 127.337 42.0221C223.016 89.1008 192.972 141.542 165.959 161.894C173.959 166.339 180.404 183.747 182.626 191.895C190.626 217.674 150.301 224.859 127.337 225.229C133.634 229.674 159.292 238.119 225.961 236.341C235.22 237.822 253.073 244.119 250.406 257.453C248.184 259.305 239.295 261.008 221.516 253.008C190.775 255.601 131.782 258.342 127.337 248.563C122.893 258.342 63.9001 255.601 33.1584 253.008C15.38 261.008 6.49084 259.305 4.26853 257.453C1.60178 244.119 19.4542 237.822 28.7138 236.341C95.3826 238.119 121.041 229.674 127.337 225.229Z" fill={isBlack ? "black" : "#fff"} />
                    <path d="M127.337 225.229C104.374 224.859 64.0482 217.674 72.0485 191.895M127.337 225.229C121.041 229.674 95.3826 238.119 28.7138 236.341C19.4542 237.822 1.60178 244.119 4.26853 257.453C6.49084 259.305 15.38 261.008 33.1584 253.008C63.9001 255.601 122.893 258.342 127.337 248.563M127.337 225.229C150.301 224.859 190.626 217.674 182.626 191.895M127.337 225.229C133.634 229.674 159.292 238.119 225.961 236.341C235.22 237.822 253.073 244.119 250.406 257.453C248.184 259.305 239.295 261.008 221.516 253.008C190.775 255.601 131.782 258.342 127.337 248.563M72.0485 191.895C74.2708 183.747 80.7154 166.339 88.7157 161.894M72.0485 191.895H127.606M88.7157 161.894C61.6778 141.523 31.6027 89.0028 127.606 41.8901C120.939 40.4086 108.272 33.8899 110.939 19.6672C110.568 14.8522 113.383 4.77784 127.606 3M88.7157 161.894H127.606M127.337 248.563V246.341M182.626 191.895C180.404 183.747 173.959 166.339 165.959 161.894M182.626 191.895H127.069M165.959 161.894C192.997 141.523 223.072 89.0028 127.069 41.8901C133.736 40.4086 146.403 33.8899 143.736 19.6672C144.106 14.8522 141.291 4.77784 127.069 3M165.959 161.894H127.069M108.716 94.114H124.004V77.4468H130.671L130.671 94.114H145.958V103.003H130.671L130.671 121.893H124.004V103.003H108.716V94.114Z" stroke="#AAAAAA" strokeWidth="6" />
                </svg>
            );

        case "knight":
            return (
                <svg width="80%" height="80%" viewBox="0 0 259 261" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M126.502 177.471C144.875 147.156 144.109 123.502 141.43 115.464C133.162 128.325 95.1155 155.271 77.1256 167.137L58.7529 187.806C49.5666 197.911 43.4424 195.844 41.5286 193.547V177.471C-1.64715 203.193 -0.958173 166.754 4.78328 145.319C6.62055 130.621 34.6388 84.8426 48.4183 63.7906L65.6427 36.2316L63.3461 24.7487V5.22776C63.3461 -3.95857 79.4222 17.4762 87.4602 29.3419H103.536C117.316 7.29468 124.588 4.07947 126.502 5.22776L132.244 29.3419C247.991 33.935 262.383 184.361 255.111 259H73.6807C69.0875 229.604 106.981 192.399 126.502 177.471Z" fill={isBlack ? "black" : "#fff"} />
                    <path d="M74.2635 61.494C72.6042 63.3489 69.5068 69.161 70.3918 77.5701C72.512 77.364 76.2547 73.8602 74.2635 61.494Z" fill={isBlack ? "black" : "#fff"} />
                    <path d="M26.6008 146.468V151.061M26.6008 146.468L32.3422 151.061M26.6008 146.468L19.711 151.061M26.6008 151.061V155.654M26.6008 151.061H31.1939L26.6008 155.654M26.6008 151.061H20.8593L26.6008 155.654M141.43 115.464C144.109 123.502 144.875 147.156 126.502 177.471C106.981 192.399 69.0875 229.604 73.6807 259H255.111C262.383 184.361 247.991 33.935 132.244 29.3419L126.502 5.22776C124.588 4.07947 117.316 7.29468 103.536 29.3419H87.4602C79.4222 17.4762 63.3461 -3.95857 63.3461 5.22776V24.7487L65.6427 36.2316L48.4183 63.7906C34.6388 84.8426 6.62055 130.621 4.78328 145.319C-0.958173 166.754 -1.64715 203.193 41.5286 177.471V193.547C43.4424 195.844 49.5666 197.911 58.7529 187.806L77.1256 167.137C95.1155 155.271 133.162 128.325 141.43 115.464ZM74.2635 61.494C72.6042 63.3489 69.5068 69.161 70.3918 77.5701C72.512 77.364 76.2547 73.8602 74.2635 61.494Z" stroke="#AAAAAA" strokeWidth="6" />
                </svg>
            )

        default:
            return null
    }
}

// const getColor = ({ x, y }) => {
//     let baseMap = ['white', 'black'];
//     let startingRow;
//     if ((y + 2) % 2 === 0) {
//         startingRow = 0;

//     } else {
//         startingRow = 1;
//     }

//     if ((x + 2) % 2 === 0) {
//         return baseMap[startingRow]
//     } else {
//         if (startingRow >= 1) { return baseMap[startingRow - 1] }
//         else { return baseMap[startingRow + 1] }
//     }


// }

const Piece = ({ type, posX, posY, onGetAllowed, isUserMove, variant }) => {
    console.log({ type, posX, posY, isUserMove, variant })
    const [isFocused, setIsFocused] = useState(false);
    const [isDragged, setIsDragged] = useState(false);
    const dragStart = () => {
        setIsDragged(true)
    };

    const dragEnd = () => {
        setIsDragged(false)
    };

    const dragMove = (e) => {
    }
    return (
        <>
            {/* {isFocused &&
                <>
                    {allowedMoves.map((move, i) => (
                        <div className="allowed-move" style={{ left: move.posX * 64 + 'px', bottom: move.posY * 64 + 'px' }}></div>
                    ))}
                </>
            } */}
            <div onMouseDown={dragStart} onMouseMove={dragMove} onMouseUp={dragEnd} className="piece" style={{ left: posX * 12.5 + '%', bottom: posY * 8.333 + '%' }}>
                {getIcon(type, variant === "black")}
            </div>
        </>
    );
}

export default Piece;