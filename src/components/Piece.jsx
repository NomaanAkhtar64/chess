import React, { useMemo, useState } from 'react';

const getIcon = (type, isBlack) => {
    switch (type) {
        case "rook":
            return (
                <svg width="48" height="48" viewBox="0 0 239 262" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M3 232.053H29.9474V196.531L47.0957 174.483V69.1435L23.823 47.0957V3H56.8947V18.9234H98.5407V3H142.636V18.9234H183.057V3H217.354V47.0957L195.306 69.1435V174.483L208.78 196.531V232.053H235.727V259H3V232.053Z" fill={isBlack ? "black" : "#fff"} />
                    <path d="M29.9474 232.053H3V259H235.727V232.053H208.78M29.9474 232.053V196.531L47.0957 174.483M29.9474 232.053H208.78M47.0957 174.483V69.1435M47.0957 174.483H195.306M47.0957 69.1435L23.823 47.0957M47.0957 69.1435H195.306M23.823 47.0957V3H56.8947V18.9234H98.5407V3H142.636V18.9234H183.057V3H217.354V47.0957M23.823 47.0957H217.354M217.354 47.0957L195.306 69.1435M195.306 69.1435V174.483M195.306 174.483L208.78 196.531V232.053" stroke="#AAA" strokeWidth="6" />
                </svg>
            )

        case "pawn":
            return "PAWN"

        case "king":
            return "KINGS"

        case "queen":
            return (
                <svg width="48" height="48" viewBox="0 0 257 238" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M40.5854 214.374C43.9154 196.891 50.9919 193.908 54.1138 194.602C55.5013 190.786 56.8195 180.865 50.9919 171.707L31.2195 150.894L27.0569 141.528L15.6097 56.1951L65.561 137.732V30.1789L105 127.5L126.959 24.9756L147.772 135.515L189.398 35.3821L186.276 136.297L239.35 56.1951L224.78 141.528V150.894L200.846 173.789V181.073C199.111 183.154 196.683 188.774 200.846 194.602C210.836 199.597 211.252 209.864 210.211 214.374L215.415 223.74C139.447 245.593 36.4228 226.862 35.3821 223.74C34.5496 221.242 38.5041 216.455 40.5854 214.374Z" fill="white" />
                    <path d="M54.1138 194.602C50.9919 193.908 43.9154 196.891 40.5854 214.374C38.5041 216.455 34.5496 221.242 35.3821 223.74C36.4228 226.862 139.447 245.593 215.415 223.74L210.211 214.374C211.252 209.864 210.836 199.597 200.846 194.602M54.1138 194.602C95.7398 187.941 169.279 191.827 200.846 194.602M54.1138 194.602C55.5013 190.786 56.8195 180.865 50.9919 171.707M200.846 194.602C196.683 188.774 199.111 183.154 200.846 181.073V173.789M50.9919 171.707C76.6612 166.851 142.569 160.468 200.846 173.789M50.9919 171.707L31.2195 150.894L27.0569 141.528M200.846 173.789L224.78 150.894V141.528M224.78 141.528L239.35 56.1951L186.276 136.297M224.78 141.528C216.704 139.758 203.574 137.762 186.276 136.297M27.0569 141.528C39.2427 139.862 52.3241 138.631 65.561 137.732M27.0569 141.528L15.6097 56.1951L65.561 137.732M186.276 136.297L189.398 35.3821L147.772 135.515M186.276 136.297C186.276 136.297 170.711 135.653 147.772 135.515M147.772 135.515L126.959 24.9756L105 127.5L65.561 30.1789V137.732M147.772 135.515C124.971 135.378 94.8846 135.741 65.561 137.732" stroke="black" stroke-width="6" />
                    <path fillRule="evenodd" clipRule="evenodd" d="M12.4878 58.2764C19.3846 58.2764 24.9756 52.6854 24.9756 45.7886C24.9756 38.8918 19.3846 33.3008 12.4878 33.3008C5.59098 33.3008 0 38.8918 0 45.7886C0 52.6854 5.59098 58.2764 12.4878 58.2764ZM12.5 56C17.7467 56 22 51.7467 22 46.5C22 41.2533 17.7467 37 12.5 37C7.25329 37 3 41.2533 3 46.5C3 51.7467 7.25329 56 12.5 56Z" fill="black" />
                    <path fillRule="evenodd" clipRule="evenodd" d="M244.488 58.9756C251.385 58.9756 256.976 53.3846 256.976 46.4878C256.976 39.591 251.385 34 244.488 34C237.591 34 232 39.591 232 46.4878C232 53.3846 237.591 58.9756 244.488 58.9756ZM244.5 55.6992C249.747 55.6992 254 51.4459 254 46.1992C254 40.9525 249.747 36.6992 244.5 36.6992C239.253 36.6992 235 40.9525 235 46.1992C235 51.4459 239.253 55.6992 244.5 55.6992Z" fill="black" />
                    <path fillRule="evenodd" clipRule="evenodd" d="M192.488 36.9756C199.385 36.9756 204.976 31.3846 204.976 24.4878C204.976 17.591 199.385 12 192.488 12C185.591 12 180 17.591 180 24.4878C180 31.3846 185.591 36.9756 192.488 36.9756ZM192.5 33.6992C197.747 33.6992 202 29.4459 202 24.1992C202 18.9525 197.747 14.6992 192.5 14.6992C187.253 14.6992 183 18.9525 183 24.1992C183 29.4459 187.253 33.6992 192.5 33.6992Z" fill="black" />
                    <path fillRule="evenodd" clipRule="evenodd" d="M127.488 24.9756C134.385 24.9756 139.976 19.3846 139.976 12.4878C139.976 5.59098 134.385 0 127.488 0C120.591 0 115 5.59098 115 12.4878C115 19.3846 120.591 24.9756 127.488 24.9756ZM127.5 21.6992C132.747 21.6992 137 17.4459 137 12.1992C137 6.95248 132.747 2.69919 127.5 2.69919C122.253 2.69919 118 6.95248 118 12.1992C118 17.4459 122.253 21.6992 127.5 21.6992Z" fill="black" />
                    <path fillRule="evenodd" clipRule="evenodd" d="M62.4878 32.9756C69.3846 32.9756 74.9756 27.3846 74.9756 20.4878C74.9756 13.591 69.3846 8 62.4878 8C55.591 8 50 13.591 50 20.4878C50 27.3846 55.591 32.9756 62.4878 32.9756ZM62.5 29.6992C67.7467 29.6992 72 25.4459 72 20.1992C72 14.9525 67.7467 10.6992 62.5 10.6992C57.2533 10.6992 53 14.9525 53 20.1992C53 25.4459 57.2533 29.6992 62.5 29.6992Z" fill="black" />
                </svg>
            )

        case "bishop":
            return "BISHOP";

        case "knight":
            return "KNIGHT"

        default:
            return null
    }
}

// const getColor = ({ x, y }) => {
//     let baseMap = ['white', 'black'];
//     let startingRow;
//     if ((y + 2) % 2 === 0) {
//         startingRow = 0;

//     } else {
//         startingRow = 1;
//     }

//     if ((x + 2) % 2 === 0) {
//         return baseMap[startingRow]
//     } else {
//         if (startingRow >= 1) { return baseMap[startingRow - 1] }
//         else { return baseMap[startingRow + 1] }
//     }


// }

const Piece = ({ type, posX, posY, onGetAllowed, variant }) => {
    const [isFocused, setIsFocused] = useState(false);
    // const allowedMoves = useMemo(onGetAllowed(posX, posY), [posX, posY, onGetAllowed]);

    return (
        <>
            {/* {isFocused &&
                <>
                    {allowedMoves.map((move, i) => (
                        <div className="allowed-move" style={{ left: move.posX * 64 + 'px', bottom: move.posY * 64 + 'px' }}></div>
                    ))}
                </>
            } */}
            <div className="piece" style={{ left: posX * 64 + 'px', bottom: posY * 64 + 'px' }}>
                {getIcon(type, variant === "black")}
            </div>
        </>
    );
}

export default Piece;